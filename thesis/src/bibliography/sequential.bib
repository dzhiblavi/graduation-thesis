@inproceedings{bib:cdcl,
    abstract = {The classical NP-complete problem of Boolean Satisfiability (SAT) has seen much interest in not just the theoretical computer science community, but also in areas where practical solutions to this problem enable significant practical applications. Since the first development of the basic search based algorithm proposed by Davis, Putnam, Logemann and Loveland (DPLL) about forty years ago, this area has seen active research effort with many interesting contributions that have culminated in state-of-the-art SAT solvers today being able to handle problem instances with thousands, and in same cases even millions, of variables. In this paper we examine some of the main ideas along this passage that have led to our current capabilities. Given the depth of the literature in this field, it is impossible to do this in any comprehensive way; rather we focus on techniques with consistent demonstrated efficiency in available solvers. For the most part, we focus on techniques within the basic DPLL search framework, but also briefly describe other approaches and look at some possible future research directions.},
    address = {Berlin, Heidelberg},
    author = {Zhang, Lintao and Malik, Sharad},
    booktitle = {Computer Aided Verification},
    editor = {Brinksma, Ed and Larsen, Kim Guldstrand},
    isbn = {978-3-540-45657-5},
    pages = {17--36},
    publisher = {Springer Berlin Heidelberg},
    title = {The Quest for Efficient Boolean Satisfiability Solvers},
    year = {2002}
}

@article{bib:dpll-1,
    author = {Davis, Martin and Logemann, George and Loveland, Donald},
    title = {A Machine Program for Theorem-Proving},
    year = {1962},
    issue_date = {July 1962},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {5},
    number = {7},
    issn = {0001-0782},
    url = {https://doi.org/10.1145/368273.368557},
    doi = {10.1145/368273.368557},
    abstract = {The programming of a proof procedure is discussed in connection with trial runs and possible improvements.},
    journal = {Commun. ACM},
    month = {jul},
    pages = {394–397},
    numpages = {4}
}

@article{bib:dpll-2,
    author = {Davis, Martin and Putnam, Hilary},
    title = {A Computing Procedure for Quantification Theory},
    year = {1960},
    issue_date = {July 1960},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {7},
    number = {3},
    issn = {0004-5411},
    url = {https://doi.org/10.1145/321033.321034},
    doi = {10.1145/321033.321034},
    abstract = {The hope that mathematical methods employed in the investigation of formal logic would lead to purely computational methods for obtaining mathematical theorems goes back to Leibniz and has been revived by Peano around the turn of the century and by Hilbert's school in the 1920's. Hilbert, noting that all of classical mathematics could be formalized within quantification theory, declared that the problem of finding an algorithm for determining whether or not a given formula of quantification theory is valid was the central problem of mathematical logic. And indeed, at one time it seemed as if investigations of this “decision” problem were on the verge of success. However, it was shown by Church and by Turing that such an algorithm can not exist. This result led to considerable pessimism regarding the possibility of using modern digital computers in deciding significant mathematical questions. However, recently there has been a revival of interest in the whole question. Specifically, it has been realized that while no decision procedure exists for quantification theory there are many proof procedures available—that is, uniform procedures which will ultimately locate a proof for any formula of quantification theory which is valid but which will usually involve seeking “forever” in the case of a formula which is not valid—and that some of these proof procedures could well turn out to be feasible for use with modern computing machinery.Hao Wang [9] and P. C. Gilmore [3] have each produced working programs which employ proof procedures in quantification theory. Gilmore's program employs a form of a basic theorem of mathematical logic due to Herbrand, and Wang's makes use of a formulation of quantification theory related to those studied by Gentzen. However, both programs encounter decisive difficulties with any but the simplest formulas of quantification theory, in connection with methods of doing propositional calculus. Wang's program, because of its use of Gentzen-like methods, involves exponentiation on the total number of truth-functional connectives, whereas Gilmore's program, using normal forms, involves exponentiation on the number of clauses present. Both methods are superior in many cases to truth table methods which involve exponentiation on the total number of variables present, and represent important initial contributions, but both run into difficulty with some fairly simple examples.In the present paper, a uniform proof procedure for quantification theory is given which is feasible for use with some rather complicated formulas and which does not ordinarily lead to exponentiation. The superiority of the present procedure over those previously available is indicated in part by the fact that a formula on which Gilmore's routine for the IBM 704 causes the machine to computer for 21 minutes without obtaining a result was worked successfully by hand computation using the present method in 30 minutes. Cf. §6, below.It should be mentioned that, before it can be hoped to employ proof procedures for quantification theory in obtaining proofs of theorems belonging to “genuine” mathematics, finite axiomatizations, which are “short,” must be obtained for various branches of mathematics. This last question will not be pursued further here; cf., however, Davis and Putnam [2], where one solution to this problem is given for ele},
    journal = {J. ACM},
    month = {jul},
    pages = {201–215},
    numpages = {15}
}

@inproceedings{bib:minisat,
    abstract = {In this article, we present a small, complete, and efficient SAT-solver in the style of conflict-driven learning, as exemplified by Chaff. We aim to give sufficient details about implementation to enable the reader to construct his or her own solver in a very short time. This will allow users of SAT-solvers to make domain specific extensions or adaptions of current state-of-the-art SAT-techniques, to meet the needs of a particular application area. The presented solver is designed with this in mind, and includes among other things a mechanism for adding arbitrary boolean constraints. It also supports solving a series of related SAT-problems efficiently by an incremental SAT-interface.},
    address = {Berlin, Heidelberg},
    author = {E{\'e}n, Niklas and S{\"o}rensson, Niklas},
    booktitle = {Theory and Applications of Satisfiability Testing},
    editor = {Giunchiglia, Enrico and Tacchella, Armando},
    isbn = {978-3-540-24605-3},
    pages = {502--518},
    publisher = {Springer Berlin Heidelberg},
    title = {An Extensible SAT-solver},
    year = {2004}}

@online{bib:maplecomsps,
    author = {Jia Hui Liang and Chanseok Oh and Vijay Ganesh and Krzysztof Czarnecki and Pascal Poupart},
    title = {MapleCOMSPS, MapleCOMSPS\_LRB, MapleCOMSPS\_CHB},
    year = 2016,
    url = {https://docs.google.com/a/gsd.uwaterloo.ca/viewer?a=v\&pid=sites\&srcid=Z3NkLnV3YXRlcmxvby5jYXxtYXBsZXNhdHxneDo2YWEzYjEzN2JmY2I1YzYz},
    urldate = {2022-04-07}
}

@inproceedings{bib:minisat-elim,
    title={Effective Preprocessing in SAT Through Variable and Clause Elimination},
    author={Niklas E{\'e}n and Armin Biere},
    booktitle={SAT},
    year={2005}
}


@TECHREPORT{bib:minisat-strengthen,
    author = {Niklas Sörensson and Niklas Een},
    title = {MiniSat v1.13 - A SAT solver with conflict-clause minimization. 2005. SAT-2005 Poster. 1 Perhaps under a generous notion of “part-time”, but still concurrently taking a statistics course and leading a normal life},
    institution = {},
    year = {2002}
}

